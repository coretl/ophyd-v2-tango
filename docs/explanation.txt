These haven't been formatted for github pages or anything yet. I will do that soon.

This repo contains some examples of how to write Tango devices that can be used by plans in the Bluesky run engine, implementing mainly just the necessary methods required by the Bluesky API for interacting with hardware, such as read(), describe(), and for movable devices: set(). These are written using nominally asynchronous methods, utilising PyTango's Asyncio "green mode." Almost all of the interaction with the (simulated) Tango hardware is through the PyTango DeviceProxy class, or more accurately, the PyTango.asyncio DeviceProxy. 
I had considered using the AttributeProxy class for communicating with Tango attributes, and this may have been more straightforward, but the DeviceProxy class provides easier access to certain information required by the Bluesky API, such as the hostname and port of the Tango Device Server that the device is hosted on, which is required for the "source" field of each entry in the TangoDevice describe() method dictionary. Tango provides attributes, "pipes" (which are essentially a dictionary of key value pairs of arbitrary and mutable datatypes) and commands.